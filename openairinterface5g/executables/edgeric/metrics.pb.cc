// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

#include "metrics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR UeMetrics::UeMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rnti_)*/0u
  , /*decltype(_impl_.cqi_)*/0u
  , /*decltype(_impl_.snr_)*/0
  , /*decltype(_impl_.tx_bytes_)*/0
  , /*decltype(_impl_.rx_bytes_)*/0
  , /*decltype(_impl_.dl_buffer_)*/0u
  , /*decltype(_impl_.ul_buffer_)*/0u
  , /*decltype(_impl_.dl_tbs_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UeMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UeMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UeMetricsDefaultTypeInternal() {}
  union {
    UeMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UeMetricsDefaultTypeInternal _UeMetrics_default_instance_;
PROTOBUF_CONSTEXPR Metrics::Metrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ue_metrics_)*/{}
  , /*decltype(_impl_.tti_cnt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsDefaultTypeInternal() {}
  union {
    Metrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsDefaultTypeInternal _Metrics_default_instance_;
static ::_pb::Metadata file_level_metadata_metrics_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_metrics_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_metrics_2eproto = nullptr;

const uint32_t TableStruct_metrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UeMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UeMetrics, _impl_.rnti_),
  PROTOBUF_FIELD_OFFSET(::UeMetrics, _impl_.cqi_),
  PROTOBUF_FIELD_OFFSET(::UeMetrics, _impl_.snr_),
  PROTOBUF_FIELD_OFFSET(::UeMetrics, _impl_.tx_bytes_),
  PROTOBUF_FIELD_OFFSET(::UeMetrics, _impl_.rx_bytes_),
  PROTOBUF_FIELD_OFFSET(::UeMetrics, _impl_.dl_buffer_),
  PROTOBUF_FIELD_OFFSET(::UeMetrics, _impl_.ul_buffer_),
  PROTOBUF_FIELD_OFFSET(::UeMetrics, _impl_.dl_tbs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Metrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Metrics, _impl_.tti_cnt_),
  PROTOBUF_FIELD_OFFSET(::Metrics, _impl_.ue_metrics_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::UeMetrics)},
  { 14, -1, -1, sizeof(::Metrics)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_UeMetrics_default_instance_._instance,
  &::_Metrics_default_instance_._instance,
};

const char descriptor_table_protodef_metrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmetrics.proto\"\215\001\n\tUeMetrics\022\014\n\004rnti\030\001 "
  "\001(\r\022\013\n\003cqi\030\002 \001(\r\022\013\n\003snr\030\003 \001(\002\022\020\n\010tx_byte"
  "s\030\004 \001(\002\022\020\n\010rx_bytes\030\005 \001(\002\022\021\n\tdl_buffer\030\006"
  " \001(\r\022\021\n\tul_buffer\030\007 \001(\r\022\016\n\006dl_tbs\030\010 \001(\002\""
  ":\n\007Metrics\022\017\n\007tti_cnt\030\001 \001(\r\022\036\n\nue_metric"
  "s\030\002 \003(\0132\n.UeMetricsb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_metrics_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_metrics_2eproto = {
    false, false, 227, descriptor_table_protodef_metrics_2eproto,
    "metrics.proto",
    &descriptor_table_metrics_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_metrics_2eproto::offsets,
    file_level_metadata_metrics_2eproto, file_level_enum_descriptors_metrics_2eproto,
    file_level_service_descriptors_metrics_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_metrics_2eproto_getter() {
  return &descriptor_table_metrics_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_metrics_2eproto(&descriptor_table_metrics_2eproto);

// ===================================================================

class UeMetrics::_Internal {
 public:
};

UeMetrics::UeMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UeMetrics)
}
UeMetrics::UeMetrics(const UeMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UeMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rnti_){}
    , decltype(_impl_.cqi_){}
    , decltype(_impl_.snr_){}
    , decltype(_impl_.tx_bytes_){}
    , decltype(_impl_.rx_bytes_){}
    , decltype(_impl_.dl_buffer_){}
    , decltype(_impl_.ul_buffer_){}
    , decltype(_impl_.dl_tbs_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rnti_, &from._impl_.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dl_tbs_) -
    reinterpret_cast<char*>(&_impl_.rnti_)) + sizeof(_impl_.dl_tbs_));
  // @@protoc_insertion_point(copy_constructor:UeMetrics)
}

inline void UeMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rnti_){0u}
    , decltype(_impl_.cqi_){0u}
    , decltype(_impl_.snr_){0}
    , decltype(_impl_.tx_bytes_){0}
    , decltype(_impl_.rx_bytes_){0}
    , decltype(_impl_.dl_buffer_){0u}
    , decltype(_impl_.ul_buffer_){0u}
    , decltype(_impl_.dl_tbs_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UeMetrics::~UeMetrics() {
  // @@protoc_insertion_point(destructor:UeMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UeMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UeMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UeMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:UeMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rnti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dl_tbs_) -
      reinterpret_cast<char*>(&_impl_.rnti_)) + sizeof(_impl_.dl_tbs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UeMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cqi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float snr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.snr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float tx_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.tx_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rx_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.rx_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 dl_buffer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.dl_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ul_buffer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ul_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float dl_tbs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.dl_tbs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UeMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UeMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rnti = 1;
  if (this->_internal_rnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // uint32 cqi = 2;
  if (this->_internal_cqi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cqi(), target);
  }

  // float snr = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_snr = this->_internal_snr();
  uint32_t raw_snr;
  memcpy(&raw_snr, &tmp_snr, sizeof(tmp_snr));
  if (raw_snr != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_snr(), target);
  }

  // float tx_bytes = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tx_bytes = this->_internal_tx_bytes();
  uint32_t raw_tx_bytes;
  memcpy(&raw_tx_bytes, &tmp_tx_bytes, sizeof(tmp_tx_bytes));
  if (raw_tx_bytes != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_tx_bytes(), target);
  }

  // float rx_bytes = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx_bytes = this->_internal_rx_bytes();
  uint32_t raw_rx_bytes;
  memcpy(&raw_rx_bytes, &tmp_rx_bytes, sizeof(tmp_rx_bytes));
  if (raw_rx_bytes != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_rx_bytes(), target);
  }

  // uint32 dl_buffer = 6;
  if (this->_internal_dl_buffer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_dl_buffer(), target);
  }

  // uint32 ul_buffer = 7;
  if (this->_internal_ul_buffer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ul_buffer(), target);
  }

  // float dl_tbs = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dl_tbs = this->_internal_dl_tbs();
  uint32_t raw_dl_tbs;
  memcpy(&raw_dl_tbs, &tmp_dl_tbs, sizeof(tmp_dl_tbs));
  if (raw_dl_tbs != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_dl_tbs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UeMetrics)
  return target;
}

size_t UeMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UeMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rnti = 1;
  if (this->_internal_rnti() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rnti());
  }

  // uint32 cqi = 2;
  if (this->_internal_cqi() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cqi());
  }

  // float snr = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_snr = this->_internal_snr();
  uint32_t raw_snr;
  memcpy(&raw_snr, &tmp_snr, sizeof(tmp_snr));
  if (raw_snr != 0) {
    total_size += 1 + 4;
  }

  // float tx_bytes = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tx_bytes = this->_internal_tx_bytes();
  uint32_t raw_tx_bytes;
  memcpy(&raw_tx_bytes, &tmp_tx_bytes, sizeof(tmp_tx_bytes));
  if (raw_tx_bytes != 0) {
    total_size += 1 + 4;
  }

  // float rx_bytes = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx_bytes = this->_internal_rx_bytes();
  uint32_t raw_rx_bytes;
  memcpy(&raw_rx_bytes, &tmp_rx_bytes, sizeof(tmp_rx_bytes));
  if (raw_rx_bytes != 0) {
    total_size += 1 + 4;
  }

  // uint32 dl_buffer = 6;
  if (this->_internal_dl_buffer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dl_buffer());
  }

  // uint32 ul_buffer = 7;
  if (this->_internal_ul_buffer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ul_buffer());
  }

  // float dl_tbs = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dl_tbs = this->_internal_dl_tbs();
  uint32_t raw_dl_tbs;
  memcpy(&raw_dl_tbs, &tmp_dl_tbs, sizeof(tmp_dl_tbs));
  if (raw_dl_tbs != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UeMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UeMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UeMetrics::GetClassData() const { return &_class_data_; }


void UeMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UeMetrics*>(&to_msg);
  auto& from = static_cast<const UeMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UeMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rnti() != 0) {
    _this->_internal_set_rnti(from._internal_rnti());
  }
  if (from._internal_cqi() != 0) {
    _this->_internal_set_cqi(from._internal_cqi());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_snr = from._internal_snr();
  uint32_t raw_snr;
  memcpy(&raw_snr, &tmp_snr, sizeof(tmp_snr));
  if (raw_snr != 0) {
    _this->_internal_set_snr(from._internal_snr());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tx_bytes = from._internal_tx_bytes();
  uint32_t raw_tx_bytes;
  memcpy(&raw_tx_bytes, &tmp_tx_bytes, sizeof(tmp_tx_bytes));
  if (raw_tx_bytes != 0) {
    _this->_internal_set_tx_bytes(from._internal_tx_bytes());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx_bytes = from._internal_rx_bytes();
  uint32_t raw_rx_bytes;
  memcpy(&raw_rx_bytes, &tmp_rx_bytes, sizeof(tmp_rx_bytes));
  if (raw_rx_bytes != 0) {
    _this->_internal_set_rx_bytes(from._internal_rx_bytes());
  }
  if (from._internal_dl_buffer() != 0) {
    _this->_internal_set_dl_buffer(from._internal_dl_buffer());
  }
  if (from._internal_ul_buffer() != 0) {
    _this->_internal_set_ul_buffer(from._internal_ul_buffer());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dl_tbs = from._internal_dl_tbs();
  uint32_t raw_dl_tbs;
  memcpy(&raw_dl_tbs, &tmp_dl_tbs, sizeof(tmp_dl_tbs));
  if (raw_dl_tbs != 0) {
    _this->_internal_set_dl_tbs(from._internal_dl_tbs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UeMetrics::CopyFrom(const UeMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UeMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UeMetrics::IsInitialized() const {
  return true;
}

void UeMetrics::InternalSwap(UeMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UeMetrics, _impl_.dl_tbs_)
      + sizeof(UeMetrics::_impl_.dl_tbs_)
      - PROTOBUF_FIELD_OFFSET(UeMetrics, _impl_.rnti_)>(
          reinterpret_cast<char*>(&_impl_.rnti_),
          reinterpret_cast<char*>(&other->_impl_.rnti_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UeMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metrics_2eproto_getter, &descriptor_table_metrics_2eproto_once,
      file_level_metadata_metrics_2eproto[0]);
}

// ===================================================================

class Metrics::_Internal {
 public:
};

Metrics::Metrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Metrics)
}
Metrics::Metrics(const Metrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ue_metrics_){from._impl_.ue_metrics_}
    , decltype(_impl_.tti_cnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tti_cnt_ = from._impl_.tti_cnt_;
  // @@protoc_insertion_point(copy_constructor:Metrics)
}

inline void Metrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ue_metrics_){arena}
    , decltype(_impl_.tti_cnt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Metrics::~Metrics() {
  // @@protoc_insertion_point(destructor:Metrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ue_metrics_.~RepeatedPtrField();
}

void Metrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:Metrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ue_metrics_.Clear();
  _impl_.tti_cnt_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 tti_cnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tti_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .UeMetrics ue_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ue_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Metrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tti_cnt = 1;
  if (this->_internal_tti_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tti_cnt(), target);
  }

  // repeated .UeMetrics ue_metrics = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ue_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_ue_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Metrics)
  return target;
}

size_t Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Metrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UeMetrics ue_metrics = 2;
  total_size += 1UL * this->_internal_ue_metrics_size();
  for (const auto& msg : this->_impl_.ue_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 tti_cnt = 1;
  if (this->_internal_tti_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tti_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metrics::GetClassData() const { return &_class_data_; }


void Metrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metrics*>(&to_msg);
  auto& from = static_cast<const Metrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Metrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ue_metrics_.MergeFrom(from._impl_.ue_metrics_);
  if (from._internal_tti_cnt() != 0) {
    _this->_internal_set_tti_cnt(from._internal_tti_cnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metrics::CopyFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics::IsInitialized() const {
  return true;
}

void Metrics::InternalSwap(Metrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ue_metrics_.InternalSwap(&other->_impl_.ue_metrics_);
  swap(_impl_.tti_cnt_, other->_impl_.tti_cnt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metrics_2eproto_getter, &descriptor_table_metrics_2eproto_once,
      file_level_metadata_metrics_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UeMetrics*
Arena::CreateMaybeMessage< ::UeMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UeMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::Metrics*
Arena::CreateMaybeMessage< ::Metrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Metrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
