// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_mcs.proto

#include "control_mcs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR mcs_control::mcs_control(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mcs_)*/{}
  , /*decltype(_impl_.ran_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct mcs_controlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mcs_controlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mcs_controlDefaultTypeInternal() {}
  union {
    mcs_control _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mcs_controlDefaultTypeInternal _mcs_control_default_instance_;
static ::_pb::Metadata file_level_metadata_control_5fmcs_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_control_5fmcs_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_control_5fmcs_2eproto = nullptr;

const uint32_t TableStruct_control_5fmcs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs_control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mcs_control, _impl_.ran_index_),
  PROTOBUF_FIELD_OFFSET(::mcs_control, _impl_.mcs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mcs_control)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_mcs_control_default_instance_._instance,
};

const char descriptor_table_protodef_control_5fmcs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021control_mcs.proto\"-\n\013mcs_control\022\021\n\tra"
  "n_index\030\001 \001(\r\022\013\n\003mcs\030\002 \003(\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_control_5fmcs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_control_5fmcs_2eproto = {
    false, false, 74, descriptor_table_protodef_control_5fmcs_2eproto,
    "control_mcs.proto",
    &descriptor_table_control_5fmcs_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_control_5fmcs_2eproto::offsets,
    file_level_metadata_control_5fmcs_2eproto, file_level_enum_descriptors_control_5fmcs_2eproto,
    file_level_service_descriptors_control_5fmcs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_control_5fmcs_2eproto_getter() {
  return &descriptor_table_control_5fmcs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_control_5fmcs_2eproto(&descriptor_table_control_5fmcs_2eproto);

// ===================================================================

class mcs_control::_Internal {
 public:
};

mcs_control::mcs_control(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mcs_control)
}
mcs_control::mcs_control(const mcs_control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mcs_control* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mcs_){from._impl_.mcs_}
    , decltype(_impl_.ran_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ran_index_ = from._impl_.ran_index_;
  // @@protoc_insertion_point(copy_constructor:mcs_control)
}

inline void mcs_control::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mcs_){arena}
    , decltype(_impl_.ran_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

mcs_control::~mcs_control() {
  // @@protoc_insertion_point(destructor:mcs_control)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mcs_control::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mcs_.~RepeatedField();
}

void mcs_control::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mcs_control::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs_control)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mcs_.Clear();
  _impl_.ran_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mcs_control::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ran_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ran_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float mcs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mcs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_mcs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mcs_control::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs_control)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ran_index = 1;
  if (this->_internal_ran_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ran_index(), target);
  }

  // repeated float mcs = 2;
  if (this->_internal_mcs_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_mcs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs_control)
  return target;
}

size_t mcs_control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs_control)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mcs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mcs_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // uint32 ran_index = 1;
  if (this->_internal_ran_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ran_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mcs_control::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mcs_control::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mcs_control::GetClassData() const { return &_class_data_; }


void mcs_control::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mcs_control*>(&to_msg);
  auto& from = static_cast<const mcs_control&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mcs_control)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mcs_.MergeFrom(from._impl_.mcs_);
  if (from._internal_ran_index() != 0) {
    _this->_internal_set_ran_index(from._internal_ran_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mcs_control::CopyFrom(const mcs_control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs_control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mcs_control::IsInitialized() const {
  return true;
}

void mcs_control::InternalSwap(mcs_control* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mcs_.InternalSwap(&other->_impl_.mcs_);
  swap(_impl_.ran_index_, other->_impl_.ran_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mcs_control::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmcs_2eproto_getter, &descriptor_table_control_5fmcs_2eproto_once,
      file_level_metadata_control_5fmcs_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mcs_control*
Arena::CreateMaybeMessage< ::mcs_control >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs_control >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
